// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: treadstone.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "treadstone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace UNO {

namespace {

const ::google::protobuf::Descriptor* LoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomDetail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomDetail_RoomState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserInfo_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayState_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusInfo_StatusType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomMsg_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameMsg_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameMsg_ColorInfo_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UNOMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UNOMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UNOMsg_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_treadstone_2eproto() {
  protobuf_AddDesc_treadstone_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "treadstone.proto");
  GOOGLE_CHECK(file != NULL);
  LoginInfo_descriptor_ = file->message_type(0);
  static const int LoginInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, room_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, password_),
  };
  LoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInfo_descriptor_,
      LoginInfo::default_instance_,
      LoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInfo));
  RoomInfo_descriptor_ = file->message_type(1);
  static const int RoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, locked_),
  };
  RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  RoomDetail_descriptor_ = file->message_type(2);
  static const int RoomDetail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetail, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetail, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetail, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetail, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetail, state_),
  };
  RoomDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomDetail_descriptor_,
      RoomDetail::default_instance_,
      RoomDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomDetail));
  RoomDetail_RoomState_descriptor_ = RoomDetail_descriptor_->enum_type(0);
  UserInfo_descriptor_ = file->message_type(3);
  static const int UserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, card_count_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  UserInfo_State_descriptor_ = UserInfo_descriptor_->enum_type(0);
  PlayState_descriptor_ = file->message_type(4);
  static const int PlayState_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayState, now_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayState, double_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayState, intercepted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayState, now_turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayState, next_turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayState, left_card_),
  };
  PlayState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayState_descriptor_,
      PlayState::default_instance_,
      PlayState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayState));
  StatusInfo_descriptor_ = file->message_type(5);
  static const int StatusInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, room_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, play_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, all_user_updated_),
  };
  StatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusInfo_descriptor_,
      StatusInfo::default_instance_,
      StatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusInfo));
  StatusInfo_StatusType_descriptor_ = StatusInfo_descriptor_->enum_type(0);
  LoginResult_descriptor_ = file->message_type(6);
  static const int LoginResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, myid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, status_info_),
  };
  LoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResult_descriptor_,
      LoginResult::default_instance_,
      LoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResult));
  RoomMsg_descriptor_ = file->message_type(7);
  static const int RoomMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMsg, login_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMsg, room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMsg, login_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMsg, room_detail_),
  };
  RoomMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomMsg_descriptor_,
      RoomMsg::default_instance_,
      RoomMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomMsg));
  RoomMsg_Type_descriptor_ = RoomMsg_descriptor_->enum_type(0);
  CardInfo_descriptor_ = file->message_type(8);
  static const int CardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, number_),
  };
  CardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardInfo_descriptor_,
      CardInfo::default_instance_,
      CardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardInfo));
  DoubtInfo_descriptor_ = file->message_type(9);
  static const int DoubtInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubtInfo, user_id_),
  };
  DoubtInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubtInfo_descriptor_,
      DoubtInfo::default_instance_,
      DoubtInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubtInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubtInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubtInfo));
  GameMsg_descriptor_ = file->message_type(10);
  static const int GameMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, color_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, card_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, status_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, doubt_info_),
  };
  GameMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMsg_descriptor_,
      GameMsg::default_instance_,
      GameMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMsg));
  GameMsg_Type_descriptor_ = GameMsg_descriptor_->enum_type(0);
  GameMsg_ColorInfo_descriptor_ = GameMsg_descriptor_->enum_type(1);
  ChatMsg_descriptor_ = file->message_type(11);
  static const int ChatMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, content_),
  };
  ChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMsg_descriptor_,
      ChatMsg::default_instance_,
      ChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMsg));
  ScoreInfo_descriptor_ = file->message_type(12);
  static const int ScoreInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, score_),
  };
  ScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreInfo_descriptor_,
      ScoreInfo::default_instance_,
      ScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreInfo));
  ScoreMsg_descriptor_ = file->message_type(13);
  static const int ScoreMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMsg, score_info_),
  };
  ScoreMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreMsg_descriptor_,
      ScoreMsg::default_instance_,
      ScoreMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreMsg));
  UNOMsg_descriptor_ = file->message_type(14);
  static const int UNOMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UNOMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UNOMsg, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UNOMsg, room_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UNOMsg, game_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UNOMsg, chat_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UNOMsg, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UNOMsg, score_msg_),
  };
  UNOMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UNOMsg_descriptor_,
      UNOMsg::default_instance_,
      UNOMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UNOMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UNOMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UNOMsg));
  UNOMsg_Type_descriptor_ = UNOMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_treadstone_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInfo_descriptor_, &LoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomDetail_descriptor_, &RoomDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayState_descriptor_, &PlayState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusInfo_descriptor_, &StatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResult_descriptor_, &LoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomMsg_descriptor_, &RoomMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardInfo_descriptor_, &CardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubtInfo_descriptor_, &DoubtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMsg_descriptor_, &GameMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMsg_descriptor_, &ChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreInfo_descriptor_, &ScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreMsg_descriptor_, &ScoreMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UNOMsg_descriptor_, &UNOMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_treadstone_2eproto() {
  delete LoginInfo::default_instance_;
  delete LoginInfo_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete RoomDetail::default_instance_;
  delete RoomDetail_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete PlayState::default_instance_;
  delete PlayState_reflection_;
  delete StatusInfo::default_instance_;
  delete StatusInfo_reflection_;
  delete LoginResult::default_instance_;
  delete LoginResult_reflection_;
  delete RoomMsg::default_instance_;
  delete RoomMsg_reflection_;
  delete CardInfo::default_instance_;
  delete CardInfo_reflection_;
  delete DoubtInfo::default_instance_;
  delete DoubtInfo_reflection_;
  delete GameMsg::default_instance_;
  delete GameMsg_reflection_;
  delete ChatMsg::default_instance_;
  delete ChatMsg_reflection_;
  delete ScoreInfo::default_instance_;
  delete ScoreInfo_reflection_;
  delete ScoreMsg::default_instance_;
  delete ScoreMsg_reflection_;
  delete UNOMsg::default_instance_;
  delete UNOMsg_reflection_;
}

void protobuf_AddDesc_treadstone_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020treadstone.proto\022\003UNO\"@\n\tLoginInfo\022\014\n\004"
    "user\030\001 \002(\t\022\023\n\013room_number\030\002 \002(\005\022\020\n\010passw"
    "ord\030\003 \001(\t\"8\n\010RoomInfo\022\014\n\004name\030\001 \002(\t\022\016\n\006n"
    "umber\030\002 \002(\005\022\016\n\006locked\030\003 \002(\010\"\233\001\n\nRoomDeta"
    "il\022\016\n\006number\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\020\n\010pass"
    "word\030\003 \001(\t\022\017\n\007timeout\030\004 \001(\005\022(\n\005state\030\005 \001"
    "(\0162\031.UNO.RoomDetail.RoomState\"\"\n\tRoomSta"
    "te\022\010\n\004Wait\020)\022\013\n\007Running\020*\"\203\001\n\010UserInfo\022\n"
    "\n\002ID\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\"\n\005state\030\003 \002(\0162"
    "\023.UNO.UserInfo.State\022\022\n\ncard_count\030\004 \002(\005"
    "\"%\n\005State\022\007\n\003uno\020=\022\010\n\004idle\020>\022\t\n\005ready\020\?\""
    "\215\001\n\tPlayState\022\020\n\010now_card\030\001 \002(\005\022\032\n\013doubl"
    "e_card\030\005 \002(\010:\005false\022\032\n\013intercepted\030\006 \002(\010"
    ":\005false\022\020\n\010now_turn\030\002 \002(\005\022\021\n\tnext_turn\030\003"
    " \002(\005\022\021\n\tleft_card\030\004 \002(\005\"\350\001\n\nStatusInfo\022("
    "\n\004type\030\001 \002(\0162\032.UNO.StatusInfo.StatusType"
    "\022 \n\tuser_info\030\002 \003(\0132\r.UNO.UserInfo\022$\n\013ro"
    "om_detail\030\003 \001(\0132\017.UNO.RoomDetail\022\"\n\nplay"
    "_state\030\004 \001(\0132\016.UNO.PlayState\022\030\n\020all_user"
    "_updated\030\005 \001(\010\"*\n\nStatusType\022\010\n\004User\0203\022\010"
    "\n\004Room\0204\022\010\n\004Play\0205\"A\n\013LoginResult\022\014\n\004myI"
    "D\030\001 \002(\005\022$\n\013status_info\030\002 \002(\0132\017.UNO.Statu"
    "sInfo\"\230\002\n\007RoomMsg\022\037\n\004type\030\001 \002(\0162\021.UNO.Ro"
    "omMsg.Type\022\"\n\nlogin_info\030\002 \001(\0132\016.UNO.Log"
    "inInfo\022 \n\troom_info\030\003 \003(\0132\r.UNO.RoomInfo"
    "\022&\n\014login_result\030\005 \001(\0132\020.UNO.LoginResult"
    "\022$\n\013room_detail\030\006 \001(\0132\017.UNO.RoomDetail\"X"
    "\n\004Type\022\013\n\007GetList\020\000\022\016\n\nListResult\020\001\022\t\n\005L"
    "ogin\020\002\022\017\n\013LoginResult\020\003\022\n\n\006Create\020\004\022\013\n\007S"
    "etting\020\005\")\n\010CardInfo\022\r\n\005count\030\001 \002(\005\022\016\n\006n"
    "umber\030\002 \003(\005\"\034\n\tDoubtInfo\022\017\n\007user_id\030\001 \002("
    "\005\"\235\003\n\007GameMsg\022\037\n\004type\030\001 \002(\0162\021.UNO.GameMs"
    "g.Type\022*\n\ncolor_info\030\002 \001(\0162\026.UNO.GameMsg"
    ".ColorInfo\022 \n\tcard_info\030\003 \001(\0132\r.UNO.Card"
    "Info\022$\n\013status_info\030\004 \001(\0132\017.UNO.StatusIn"
    "fo\022\"\n\ndoubt_info\030\005 \001(\0132\016.UNO.DoubtInfo\"\227"
    "\001\n\004Type\022\014\n\010PlayCard\020\013\022\022\n\016PlayCardResult\020"
    "\014\022\014\n\010DrawCard\020\r\022\022\n\016DrawCardResult\020\016\022\007\n\003U"
    "NO\020\017\022\t\n\005Ready\020\020\022\t\n\005Doubt\020\021\022\n\n\006Status\020\022\022\010"
    "\n\004Done\020\023\022\t\n\005Black\020\024\022\013\n\007Timeout\020\025\"\?\n\tColo"
    "rInfo\022\010\n\004Shit\020\037\022\010\n\004Blue\020 \022\t\n\005Green\020!\022\n\n\006"
    "Yellow\020\"\022\007\n\003Red\020#\"8\n\007ChatMsg\022\014\n\004time\030\001 \002"
    "(\003\022\016\n\006userID\030\002 \002(\005\022\017\n\007content\030\003 \002(\t\"*\n\tS"
    "coreInfo\022\016\n\006userID\030\001 \002(\005\022\r\n\005score\030\002 \002(\005\""
    ".\n\010ScoreMsg\022\"\n\nscore_info\030\001 \003(\0132\016.UNO.Sc"
    "oreInfo\"\213\002\n\006UNOMsg\022\036\n\004type\030\001 \002(\0162\020.UNO.U"
    "NOMsg.Type\022\020\n\010sequence\030\002 \002(\003\022\036\n\010room_msg"
    "\030\003 \001(\0132\014.UNO.RoomMsg\022\036\n\010game_msg\030\004 \001(\0132\014"
    ".UNO.GameMsg\022\036\n\010chat_msg\030\005 \001(\0132\014.UNO.Cha"
    "tMsg\022\021\n\terror_msg\030\006 \001(\t\022 \n\tscore_msg\030\007 \001"
    "(\0132\r.UNO.ScoreMsg\":\n\004Type\022\010\n\004Room\020[\022\010\n\004G"
    "ame\020\\\022\010\n\004Chat\020]\022\t\n\005Error\020^\022\t\n\005Score\020_", 2077);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "treadstone.proto", &protobuf_RegisterTypes);
  LoginInfo::default_instance_ = new LoginInfo();
  RoomInfo::default_instance_ = new RoomInfo();
  RoomDetail::default_instance_ = new RoomDetail();
  UserInfo::default_instance_ = new UserInfo();
  PlayState::default_instance_ = new PlayState();
  StatusInfo::default_instance_ = new StatusInfo();
  LoginResult::default_instance_ = new LoginResult();
  RoomMsg::default_instance_ = new RoomMsg();
  CardInfo::default_instance_ = new CardInfo();
  DoubtInfo::default_instance_ = new DoubtInfo();
  GameMsg::default_instance_ = new GameMsg();
  ChatMsg::default_instance_ = new ChatMsg();
  ScoreInfo::default_instance_ = new ScoreInfo();
  ScoreMsg::default_instance_ = new ScoreMsg();
  UNOMsg::default_instance_ = new UNOMsg();
  LoginInfo::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  RoomDetail::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  PlayState::default_instance_->InitAsDefaultInstance();
  StatusInfo::default_instance_->InitAsDefaultInstance();
  LoginResult::default_instance_->InitAsDefaultInstance();
  RoomMsg::default_instance_->InitAsDefaultInstance();
  CardInfo::default_instance_->InitAsDefaultInstance();
  DoubtInfo::default_instance_->InitAsDefaultInstance();
  GameMsg::default_instance_->InitAsDefaultInstance();
  ChatMsg::default_instance_->InitAsDefaultInstance();
  ScoreInfo::default_instance_->InitAsDefaultInstance();
  ScoreMsg::default_instance_->InitAsDefaultInstance();
  UNOMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_treadstone_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_treadstone_2eproto {
  StaticDescriptorInitializer_treadstone_2eproto() {
    protobuf_AddDesc_treadstone_2eproto();
  }
} static_descriptor_initializer_treadstone_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginInfo::kUserFieldNumber;
const int LoginInfo::kRoomNumberFieldNumber;
const int LoginInfo::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginInfo::LoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.LoginInfo)
}

void LoginInfo::InitAsDefaultInstance() {
}

LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.LoginInfo)
}

void LoginInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_number_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInfo::~LoginInfo() {
  // @@protoc_insertion_point(destructor:UNO.LoginInfo)
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void LoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInfo_descriptor_;
}

const LoginInfo& LoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

LoginInfo* LoginInfo::default_instance_ = NULL;

LoginInfo* LoginInfo::New() const {
  return new LoginInfo;
}

void LoginInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    room_number_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.LoginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_number;
        break;
      }

      // required int32 room_number = 2;
      case 2: {
        if (tag == 16) {
         parse_room_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_number_)));
          set_has_room_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.LoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.LoginInfo)
  return false;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.LoginInfo)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // required int32 room_number = 2;
  if (has_room_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_number(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.LoginInfo)
}

::google::protobuf::uint8* LoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.LoginInfo)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required int32 room_number = 2;
  if (has_room_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_number(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.LoginInfo)
  return target;
}

int LoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required int32 room_number = 2;
    if (has_room_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_number());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_room_number()) {
      set_room_number(from.room_number());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(room_number_, other->room_number_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInfo_descriptor_;
  metadata.reflection = LoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kNameFieldNumber;
const int RoomInfo::kNumberFieldNumber;
const int RoomInfo::kLockedFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.RoomInfo)
}

void RoomInfo::InitAsDefaultInstance() {
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.RoomInfo)
}

void RoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  number_ = 0;
  locked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:UNO.RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(number_, locked_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.RoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // required int32 number = 2;
      case 2: {
        if (tag == 16) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_locked;
        break;
      }

      // required bool locked = 3;
      case 3: {
        if (tag == 24) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.RoomInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  // required bool locked = 3;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.RoomInfo)
}

::google::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.RoomInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  // required bool locked = 3;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.RoomInfo)
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required bool locked = 3;
    if (has_locked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(number_, other->number_);
    std::swap(locked_, other->locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RoomDetail_RoomState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomDetail_RoomState_descriptor_;
}
bool RoomDetail_RoomState_IsValid(int value) {
  switch(value) {
    case 41:
    case 42:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoomDetail_RoomState RoomDetail::Wait;
const RoomDetail_RoomState RoomDetail::Running;
const RoomDetail_RoomState RoomDetail::RoomState_MIN;
const RoomDetail_RoomState RoomDetail::RoomState_MAX;
const int RoomDetail::RoomState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoomDetail::kNumberFieldNumber;
const int RoomDetail::kNameFieldNumber;
const int RoomDetail::kPasswordFieldNumber;
const int RoomDetail::kTimeoutFieldNumber;
const int RoomDetail::kStateFieldNumber;
#endif  // !_MSC_VER

RoomDetail::RoomDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.RoomDetail)
}

void RoomDetail::InitAsDefaultInstance() {
}

RoomDetail::RoomDetail(const RoomDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.RoomDetail)
}

void RoomDetail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0;
  state_ = 41;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomDetail::~RoomDetail() {
  // @@protoc_insertion_point(destructor:UNO.RoomDetail)
  SharedDtor();
}

void RoomDetail::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void RoomDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomDetail_descriptor_;
}

const RoomDetail& RoomDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

RoomDetail* RoomDetail::default_instance_ = NULL;

RoomDetail* RoomDetail::New() const {
  return new RoomDetail;
}

void RoomDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(number_, timeout_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    state_ = 41;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.RoomDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional .UNO.RoomDetail.RoomState state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UNO::RoomDetail_RoomState_IsValid(value)) {
            set_state(static_cast< ::UNO::RoomDetail_RoomState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.RoomDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.RoomDetail)
  return false;
#undef DO_
}

void RoomDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.RoomDetail)
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional int32 timeout = 4;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }

  // optional .UNO.RoomDetail.RoomState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.RoomDetail)
}

::google::protobuf::uint8* RoomDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.RoomDetail)
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional int32 timeout = 4;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }

  // optional .UNO.RoomDetail.RoomState state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.RoomDetail)
  return target;
}

int RoomDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // optional .UNO.RoomDetail.RoomState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomDetail::MergeFrom(const RoomDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomDetail::CopyFrom(const RoomDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoomDetail::Swap(RoomDetail* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(timeout_, other->timeout_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomDetail_descriptor_;
  metadata.reflection = RoomDetail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserInfo_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_State_descriptor_;
}
bool UserInfo_State_IsValid(int value) {
  switch(value) {
    case 61:
    case 62:
    case 63:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserInfo_State UserInfo::uno;
const UserInfo_State UserInfo::idle;
const UserInfo_State UserInfo::ready;
const UserInfo_State UserInfo::State_MIN;
const UserInfo_State UserInfo::State_MAX;
const int UserInfo::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserInfo::kIDFieldNumber;
const int UserInfo::kNameFieldNumber;
const int UserInfo::kStateFieldNumber;
const int UserInfo::kCardCountFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 61;
  card_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:UNO.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    state_ = 61;
    card_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required .UNO.UserInfo.State state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UNO::UserInfo_State_IsValid(value)) {
            set_state(static_cast< ::UNO::UserInfo_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_card_count;
        break;
      }

      // required int32 card_count = 4;
      case 4: {
        if (tag == 32) {
         parse_card_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_count_)));
          set_has_card_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.UserInfo)
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .UNO.UserInfo.State state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required int32 card_count = 4;
  if (has_card_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->card_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.UserInfo)
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .UNO.UserInfo.State state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required int32 card_count = 4;
  if (has_card_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->card_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .UNO.UserInfo.State state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required int32 card_count = 4;
    if (has_card_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_card_count()) {
      set_card_count(from.card_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(state_, other->state_);
    std::swap(card_count_, other->card_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayState::kNowCardFieldNumber;
const int PlayState::kDoubleCardFieldNumber;
const int PlayState::kInterceptedFieldNumber;
const int PlayState::kNowTurnFieldNumber;
const int PlayState::kNextTurnFieldNumber;
const int PlayState::kLeftCardFieldNumber;
#endif  // !_MSC_VER

PlayState::PlayState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.PlayState)
}

void PlayState::InitAsDefaultInstance() {
}

PlayState::PlayState(const PlayState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.PlayState)
}

void PlayState::SharedCtor() {
  _cached_size_ = 0;
  now_card_ = 0;
  double_card_ = false;
  intercepted_ = false;
  now_turn_ = 0;
  next_turn_ = 0;
  left_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayState::~PlayState() {
  // @@protoc_insertion_point(destructor:UNO.PlayState)
  SharedDtor();
}

void PlayState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayState_descriptor_;
}

const PlayState& PlayState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

PlayState* PlayState::default_instance_ = NULL;

PlayState* PlayState::New() const {
  return new PlayState;
}

void PlayState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(now_card_, left_card_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.PlayState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 now_card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_card_)));
          set_has_now_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_now_turn;
        break;
      }

      // required int32 now_turn = 2;
      case 2: {
        if (tag == 16) {
         parse_now_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_turn_)));
          set_has_now_turn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_next_turn;
        break;
      }

      // required int32 next_turn = 3;
      case 3: {
        if (tag == 24) {
         parse_next_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_turn_)));
          set_has_next_turn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_left_card;
        break;
      }

      // required int32 left_card = 4;
      case 4: {
        if (tag == 32) {
         parse_left_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_)));
          set_has_left_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_double_card;
        break;
      }

      // required bool double_card = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_double_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &double_card_)));
          set_has_double_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_intercepted;
        break;
      }

      // required bool intercepted = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_intercepted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intercepted_)));
          set_has_intercepted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.PlayState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.PlayState)
  return false;
#undef DO_
}

void PlayState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.PlayState)
  // required int32 now_card = 1;
  if (has_now_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->now_card(), output);
  }

  // required int32 now_turn = 2;
  if (has_now_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->now_turn(), output);
  }

  // required int32 next_turn = 3;
  if (has_next_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->next_turn(), output);
  }

  // required int32 left_card = 4;
  if (has_left_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_card(), output);
  }

  // required bool double_card = 5 [default = false];
  if (has_double_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->double_card(), output);
  }

  // required bool intercepted = 6 [default = false];
  if (has_intercepted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->intercepted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.PlayState)
}

::google::protobuf::uint8* PlayState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.PlayState)
  // required int32 now_card = 1;
  if (has_now_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->now_card(), target);
  }

  // required int32 now_turn = 2;
  if (has_now_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->now_turn(), target);
  }

  // required int32 next_turn = 3;
  if (has_next_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->next_turn(), target);
  }

  // required int32 left_card = 4;
  if (has_left_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_card(), target);
  }

  // required bool double_card = 5 [default = false];
  if (has_double_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->double_card(), target);
  }

  // required bool intercepted = 6 [default = false];
  if (has_intercepted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->intercepted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.PlayState)
  return target;
}

int PlayState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 now_card = 1;
    if (has_now_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_card());
    }

    // required bool double_card = 5 [default = false];
    if (has_double_card()) {
      total_size += 1 + 1;
    }

    // required bool intercepted = 6 [default = false];
    if (has_intercepted()) {
      total_size += 1 + 1;
    }

    // required int32 now_turn = 2;
    if (has_now_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_turn());
    }

    // required int32 next_turn = 3;
    if (has_next_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_turn());
    }

    // required int32 left_card = 4;
    if (has_left_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayState::MergeFrom(const PlayState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_now_card()) {
      set_now_card(from.now_card());
    }
    if (from.has_double_card()) {
      set_double_card(from.double_card());
    }
    if (from.has_intercepted()) {
      set_intercepted(from.intercepted());
    }
    if (from.has_now_turn()) {
      set_now_turn(from.now_turn());
    }
    if (from.has_next_turn()) {
      set_next_turn(from.next_turn());
    }
    if (from.has_left_card()) {
      set_left_card(from.left_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayState::CopyFrom(const PlayState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PlayState::Swap(PlayState* other) {
  if (other != this) {
    std::swap(now_card_, other->now_card_);
    std::swap(double_card_, other->double_card_);
    std::swap(intercepted_, other->intercepted_);
    std::swap(now_turn_, other->now_turn_);
    std::swap(next_turn_, other->next_turn_);
    std::swap(left_card_, other->left_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayState_descriptor_;
  metadata.reflection = PlayState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StatusInfo_StatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_StatusType_descriptor_;
}
bool StatusInfo_StatusType_IsValid(int value) {
  switch(value) {
    case 51:
    case 52:
    case 53:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatusInfo_StatusType StatusInfo::User;
const StatusInfo_StatusType StatusInfo::Room;
const StatusInfo_StatusType StatusInfo::Play;
const StatusInfo_StatusType StatusInfo::StatusType_MIN;
const StatusInfo_StatusType StatusInfo::StatusType_MAX;
const int StatusInfo::StatusType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StatusInfo::kTypeFieldNumber;
const int StatusInfo::kUserInfoFieldNumber;
const int StatusInfo::kRoomDetailFieldNumber;
const int StatusInfo::kPlayStateFieldNumber;
const int StatusInfo::kAllUserUpdatedFieldNumber;
#endif  // !_MSC_VER

StatusInfo::StatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.StatusInfo)
}

void StatusInfo::InitAsDefaultInstance() {
  room_detail_ = const_cast< ::UNO::RoomDetail*>(&::UNO::RoomDetail::default_instance());
  play_state_ = const_cast< ::UNO::PlayState*>(&::UNO::PlayState::default_instance());
}

StatusInfo::StatusInfo(const StatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.StatusInfo)
}

void StatusInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 51;
  room_detail_ = NULL;
  play_state_ = NULL;
  all_user_updated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusInfo::~StatusInfo() {
  // @@protoc_insertion_point(destructor:UNO.StatusInfo)
  SharedDtor();
}

void StatusInfo::SharedDtor() {
  if (this != default_instance_) {
    delete room_detail_;
    delete play_state_;
  }
}

void StatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_descriptor_;
}

const StatusInfo& StatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

StatusInfo* StatusInfo::default_instance_ = NULL;

StatusInfo* StatusInfo::New() const {
  return new StatusInfo;
}

void StatusInfo::Clear() {
  if (_has_bits_[0 / 32] & 29) {
    type_ = 51;
    if (has_room_detail()) {
      if (room_detail_ != NULL) room_detail_->::UNO::RoomDetail::Clear();
    }
    if (has_play_state()) {
      if (play_state_ != NULL) play_state_->::UNO::PlayState::Clear();
    }
    all_user_updated_ = false;
  }
  user_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.StatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UNO.StatusInfo.StatusType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UNO::StatusInfo_StatusType_IsValid(value)) {
            set_type(static_cast< ::UNO::StatusInfo_StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        break;
      }

      // repeated .UNO.UserInfo user_info = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        if (input->ExpectTag(26)) goto parse_room_detail;
        break;
      }

      // optional .UNO.RoomDetail room_detail = 3;
      case 3: {
        if (tag == 26) {
         parse_room_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_play_state;
        break;
      }

      // optional .UNO.PlayState play_state = 4;
      case 4: {
        if (tag == 34) {
         parse_play_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_all_user_updated;
        break;
      }

      // optional bool all_user_updated = 5;
      case 5: {
        if (tag == 40) {
         parse_all_user_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_user_updated_)));
          set_has_all_user_updated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.StatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.StatusInfo)
  return false;
#undef DO_
}

void StatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.StatusInfo)
  // required .UNO.StatusInfo.StatusType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .UNO.UserInfo user_info = 2;
  for (int i = 0; i < this->user_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_info(i), output);
  }

  // optional .UNO.RoomDetail room_detail = 3;
  if (has_room_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_detail(), output);
  }

  // optional .UNO.PlayState play_state = 4;
  if (has_play_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->play_state(), output);
  }

  // optional bool all_user_updated = 5;
  if (has_all_user_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->all_user_updated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.StatusInfo)
}

::google::protobuf::uint8* StatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.StatusInfo)
  // required .UNO.StatusInfo.StatusType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .UNO.UserInfo user_info = 2;
  for (int i = 0; i < this->user_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_info(i), target);
  }

  // optional .UNO.RoomDetail room_detail = 3;
  if (has_room_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_detail(), target);
  }

  // optional .UNO.PlayState play_state = 4;
  if (has_play_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->play_state(), target);
  }

  // optional bool all_user_updated = 5;
  if (has_all_user_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->all_user_updated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.StatusInfo)
  return target;
}

int StatusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UNO.StatusInfo.StatusType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .UNO.RoomDetail room_detail = 3;
    if (has_room_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_detail());
    }

    // optional .UNO.PlayState play_state = 4;
    if (has_play_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_state());
    }

    // optional bool all_user_updated = 5;
    if (has_all_user_updated()) {
      total_size += 1 + 1;
    }

  }
  // repeated .UNO.UserInfo user_info = 2;
  total_size += 1 * this->user_info_size();
  for (int i = 0; i < this->user_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusInfo::MergeFrom(const StatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_.MergeFrom(from.user_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_room_detail()) {
      mutable_room_detail()->::UNO::RoomDetail::MergeFrom(from.room_detail());
    }
    if (from.has_play_state()) {
      mutable_play_state()->::UNO::PlayState::MergeFrom(from.play_state());
    }
    if (from.has_all_user_updated()) {
      set_all_user_updated(from.all_user_updated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusInfo::CopyFrom(const StatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_info())) return false;
  if (has_room_detail()) {
    if (!this->room_detail().IsInitialized()) return false;
  }
  if (has_play_state()) {
    if (!this->play_state().IsInitialized()) return false;
  }
  return true;
}

void StatusInfo::Swap(StatusInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    user_info_.Swap(&other->user_info_);
    std::swap(room_detail_, other->room_detail_);
    std::swap(play_state_, other->play_state_);
    std::swap(all_user_updated_, other->all_user_updated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusInfo_descriptor_;
  metadata.reflection = StatusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResult::kMyIDFieldNumber;
const int LoginResult::kStatusInfoFieldNumber;
#endif  // !_MSC_VER

LoginResult::LoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.LoginResult)
}

void LoginResult::InitAsDefaultInstance() {
  status_info_ = const_cast< ::UNO::StatusInfo*>(&::UNO::StatusInfo::default_instance());
}

LoginResult::LoginResult(const LoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.LoginResult)
}

void LoginResult::SharedCtor() {
  _cached_size_ = 0;
  myid_ = 0;
  status_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResult::~LoginResult() {
  // @@protoc_insertion_point(destructor:UNO.LoginResult)
  SharedDtor();
}

void LoginResult::SharedDtor() {
  if (this != default_instance_) {
    delete status_info_;
  }
}

void LoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_descriptor_;
}

const LoginResult& LoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

LoginResult* LoginResult::default_instance_ = NULL;

LoginResult* LoginResult::New() const {
  return new LoginResult;
}

void LoginResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    myid_ = 0;
    if (has_status_info()) {
      if (status_info_ != NULL) status_info_->::UNO::StatusInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.LoginResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 myID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myid_)));
          set_has_myid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status_info;
        break;
      }

      // required .UNO.StatusInfo status_info = 2;
      case 2: {
        if (tag == 18) {
         parse_status_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.LoginResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.LoginResult)
  return false;
#undef DO_
}

void LoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.LoginResult)
  // required int32 myID = 1;
  if (has_myid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->myid(), output);
  }

  // required .UNO.StatusInfo status_info = 2;
  if (has_status_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.LoginResult)
}

::google::protobuf::uint8* LoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.LoginResult)
  // required int32 myID = 1;
  if (has_myid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->myid(), target);
  }

  // required .UNO.StatusInfo status_info = 2;
  if (has_status_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.LoginResult)
  return target;
}

int LoginResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 myID = 1;
    if (has_myid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myid());
    }

    // required .UNO.StatusInfo status_info = 2;
    if (has_status_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResult::MergeFrom(const LoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myid()) {
      set_myid(from.myid());
    }
    if (from.has_status_info()) {
      mutable_status_info()->::UNO::StatusInfo::MergeFrom(from.status_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResult::CopyFrom(const LoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status_info()) {
    if (!this->status_info().IsInitialized()) return false;
  }
  return true;
}

void LoginResult::Swap(LoginResult* other) {
  if (other != this) {
    std::swap(myid_, other->myid_);
    std::swap(status_info_, other->status_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResult_descriptor_;
  metadata.reflection = LoginResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RoomMsg_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMsg_Type_descriptor_;
}
bool RoomMsg_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoomMsg_Type RoomMsg::GetList;
const RoomMsg_Type RoomMsg::ListResult;
const RoomMsg_Type RoomMsg::Login;
const RoomMsg_Type RoomMsg::LoginResult;
const RoomMsg_Type RoomMsg::Create;
const RoomMsg_Type RoomMsg::Setting;
const RoomMsg_Type RoomMsg::Type_MIN;
const RoomMsg_Type RoomMsg::Type_MAX;
const int RoomMsg::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoomMsg::kTypeFieldNumber;
const int RoomMsg::kLoginInfoFieldNumber;
const int RoomMsg::kRoomInfoFieldNumber;
const int RoomMsg::kLoginResultFieldNumber;
const int RoomMsg::kRoomDetailFieldNumber;
#endif  // !_MSC_VER

RoomMsg::RoomMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.RoomMsg)
}

void RoomMsg::InitAsDefaultInstance() {
  login_info_ = const_cast< ::UNO::LoginInfo*>(&::UNO::LoginInfo::default_instance());
  login_result_ = const_cast< ::UNO::LoginResult*>(&::UNO::LoginResult::default_instance());
  room_detail_ = const_cast< ::UNO::RoomDetail*>(&::UNO::RoomDetail::default_instance());
}

RoomMsg::RoomMsg(const RoomMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.RoomMsg)
}

void RoomMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  login_info_ = NULL;
  login_result_ = NULL;
  room_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomMsg::~RoomMsg() {
  // @@protoc_insertion_point(destructor:UNO.RoomMsg)
  SharedDtor();
}

void RoomMsg::SharedDtor() {
  if (this != default_instance_) {
    delete login_info_;
    delete login_result_;
    delete room_detail_;
  }
}

void RoomMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMsg_descriptor_;
}

const RoomMsg& RoomMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

RoomMsg* RoomMsg::default_instance_ = NULL;

RoomMsg* RoomMsg::New() const {
  return new RoomMsg;
}

void RoomMsg::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    type_ = 0;
    if (has_login_info()) {
      if (login_info_ != NULL) login_info_->::UNO::LoginInfo::Clear();
    }
    if (has_login_result()) {
      if (login_result_ != NULL) login_result_->::UNO::LoginResult::Clear();
    }
    if (has_room_detail()) {
      if (room_detail_ != NULL) room_detail_->::UNO::RoomDetail::Clear();
    }
  }
  room_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.RoomMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UNO.RoomMsg.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UNO::RoomMsg_Type_IsValid(value)) {
            set_type(static_cast< ::UNO::RoomMsg_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_login_info;
        break;
      }

      // optional .UNO.LoginInfo login_info = 2;
      case 2: {
        if (tag == 18) {
         parse_login_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_info;
        break;
      }

      // repeated .UNO.RoomInfo room_info = 3;
      case 3: {
        if (tag == 26) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_info;
        if (input->ExpectTag(42)) goto parse_login_result;
        break;
      }

      // optional .UNO.LoginResult login_result = 5;
      case 5: {
        if (tag == 42) {
         parse_login_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_room_detail;
        break;
      }

      // optional .UNO.RoomDetail room_detail = 6;
      case 6: {
        if (tag == 50) {
         parse_room_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.RoomMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.RoomMsg)
  return false;
#undef DO_
}

void RoomMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.RoomMsg)
  // required .UNO.RoomMsg.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .UNO.LoginInfo login_info = 2;
  if (has_login_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->login_info(), output);
  }

  // repeated .UNO.RoomInfo room_info = 3;
  for (int i = 0; i < this->room_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_info(i), output);
  }

  // optional .UNO.LoginResult login_result = 5;
  if (has_login_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->login_result(), output);
  }

  // optional .UNO.RoomDetail room_detail = 6;
  if (has_room_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->room_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.RoomMsg)
}

::google::protobuf::uint8* RoomMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.RoomMsg)
  // required .UNO.RoomMsg.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .UNO.LoginInfo login_info = 2;
  if (has_login_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->login_info(), target);
  }

  // repeated .UNO.RoomInfo room_info = 3;
  for (int i = 0; i < this->room_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_info(i), target);
  }

  // optional .UNO.LoginResult login_result = 5;
  if (has_login_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->login_result(), target);
  }

  // optional .UNO.RoomDetail room_detail = 6;
  if (has_room_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->room_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.RoomMsg)
  return target;
}

int RoomMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UNO.RoomMsg.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .UNO.LoginInfo login_info = 2;
    if (has_login_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_info());
    }

    // optional .UNO.LoginResult login_result = 5;
    if (has_login_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_result());
    }

    // optional .UNO.RoomDetail room_detail = 6;
    if (has_room_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_detail());
    }

  }
  // repeated .UNO.RoomInfo room_info = 3;
  total_size += 1 * this->room_info_size();
  for (int i = 0; i < this->room_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomMsg::MergeFrom(const RoomMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_info_.MergeFrom(from.room_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_login_info()) {
      mutable_login_info()->::UNO::LoginInfo::MergeFrom(from.login_info());
    }
    if (from.has_login_result()) {
      mutable_login_result()->::UNO::LoginResult::MergeFrom(from.login_result());
    }
    if (from.has_room_detail()) {
      mutable_room_detail()->::UNO::RoomDetail::MergeFrom(from.room_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMsg::CopyFrom(const RoomMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_login_info()) {
    if (!this->login_info().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->room_info())) return false;
  if (has_login_result()) {
    if (!this->login_result().IsInitialized()) return false;
  }
  if (has_room_detail()) {
    if (!this->room_detail().IsInitialized()) return false;
  }
  return true;
}

void RoomMsg::Swap(RoomMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(login_info_, other->login_info_);
    room_info_.Swap(&other->room_info_);
    std::swap(login_result_, other->login_result_);
    std::swap(room_detail_, other->room_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomMsg_descriptor_;
  metadata.reflection = RoomMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardInfo::kCountFieldNumber;
const int CardInfo::kNumberFieldNumber;
#endif  // !_MSC_VER

CardInfo::CardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.CardInfo)
}

void CardInfo::InitAsDefaultInstance() {
}

CardInfo::CardInfo(const CardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.CardInfo)
}

void CardInfo::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardInfo::~CardInfo() {
  // @@protoc_insertion_point(destructor:UNO.CardInfo)
  SharedDtor();
}

void CardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardInfo_descriptor_;
}

const CardInfo& CardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

CardInfo* CardInfo::default_instance_ = NULL;

CardInfo* CardInfo::New() const {
  return new CardInfo;
}

void CardInfo::Clear() {
  count_ = 0;
  number_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.CardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // repeated int32 number = 2;
      case 2: {
        if (tag == 16) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_number())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_number())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.CardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.CardInfo)
  return false;
#undef DO_
}

void CardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.CardInfo)
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated int32 number = 2;
  for (int i = 0; i < this->number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->number(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.CardInfo)
}

::google::protobuf::uint8* CardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.CardInfo)
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated int32 number = 2;
  for (int i = 0; i < this->number_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->number(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.CardInfo)
  return target;
}

int CardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated int32 number = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->number_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->number(i));
    }
    total_size += 1 * this->number_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardInfo::MergeFrom(const CardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  number_.MergeFrom(from.number_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardInfo::CopyFrom(const CardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CardInfo::Swap(CardInfo* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    number_.Swap(&other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardInfo_descriptor_;
  metadata.reflection = CardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubtInfo::kUserIdFieldNumber;
#endif  // !_MSC_VER

DoubtInfo::DoubtInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.DoubtInfo)
}

void DoubtInfo::InitAsDefaultInstance() {
}

DoubtInfo::DoubtInfo(const DoubtInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.DoubtInfo)
}

void DoubtInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubtInfo::~DoubtInfo() {
  // @@protoc_insertion_point(destructor:UNO.DoubtInfo)
  SharedDtor();
}

void DoubtInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubtInfo_descriptor_;
}

const DoubtInfo& DoubtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

DoubtInfo* DoubtInfo::default_instance_ = NULL;

DoubtInfo* DoubtInfo::New() const {
  return new DoubtInfo;
}

void DoubtInfo::Clear() {
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.DoubtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.DoubtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.DoubtInfo)
  return false;
#undef DO_
}

void DoubtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.DoubtInfo)
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.DoubtInfo)
}

::google::protobuf::uint8* DoubtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.DoubtInfo)
  // required int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.DoubtInfo)
  return target;
}

int DoubtInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubtInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubtInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubtInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubtInfo::MergeFrom(const DoubtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubtInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubtInfo::CopyFrom(const DoubtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubtInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DoubtInfo::Swap(DoubtInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubtInfo_descriptor_;
  metadata.reflection = DoubtInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GameMsg_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMsg_Type_descriptor_;
}
bool GameMsg_Type_IsValid(int value) {
  switch(value) {
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameMsg_Type GameMsg::PlayCard;
const GameMsg_Type GameMsg::PlayCardResult;
const GameMsg_Type GameMsg::DrawCard;
const GameMsg_Type GameMsg::DrawCardResult;
const GameMsg_Type GameMsg::UNO;
const GameMsg_Type GameMsg::Ready;
const GameMsg_Type GameMsg::Doubt;
const GameMsg_Type GameMsg::Status;
const GameMsg_Type GameMsg::Done;
const GameMsg_Type GameMsg::Black;
const GameMsg_Type GameMsg::Timeout;
const GameMsg_Type GameMsg::Type_MIN;
const GameMsg_Type GameMsg::Type_MAX;
const int GameMsg::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GameMsg_ColorInfo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMsg_ColorInfo_descriptor_;
}
bool GameMsg_ColorInfo_IsValid(int value) {
  switch(value) {
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameMsg_ColorInfo GameMsg::Shit;
const GameMsg_ColorInfo GameMsg::Blue;
const GameMsg_ColorInfo GameMsg::Green;
const GameMsg_ColorInfo GameMsg::Yellow;
const GameMsg_ColorInfo GameMsg::Red;
const GameMsg_ColorInfo GameMsg::ColorInfo_MIN;
const GameMsg_ColorInfo GameMsg::ColorInfo_MAX;
const int GameMsg::ColorInfo_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameMsg::kTypeFieldNumber;
const int GameMsg::kColorInfoFieldNumber;
const int GameMsg::kCardInfoFieldNumber;
const int GameMsg::kStatusInfoFieldNumber;
const int GameMsg::kDoubtInfoFieldNumber;
#endif  // !_MSC_VER

GameMsg::GameMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.GameMsg)
}

void GameMsg::InitAsDefaultInstance() {
  card_info_ = const_cast< ::UNO::CardInfo*>(&::UNO::CardInfo::default_instance());
  status_info_ = const_cast< ::UNO::StatusInfo*>(&::UNO::StatusInfo::default_instance());
  doubt_info_ = const_cast< ::UNO::DoubtInfo*>(&::UNO::DoubtInfo::default_instance());
}

GameMsg::GameMsg(const GameMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.GameMsg)
}

void GameMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 11;
  color_info_ = 31;
  card_info_ = NULL;
  status_info_ = NULL;
  doubt_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMsg::~GameMsg() {
  // @@protoc_insertion_point(destructor:UNO.GameMsg)
  SharedDtor();
}

void GameMsg::SharedDtor() {
  if (this != default_instance_) {
    delete card_info_;
    delete status_info_;
    delete doubt_info_;
  }
}

void GameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMsg_descriptor_;
}

const GameMsg& GameMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

GameMsg* GameMsg::default_instance_ = NULL;

GameMsg* GameMsg::New() const {
  return new GameMsg;
}

void GameMsg::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    type_ = 11;
    color_info_ = 31;
    if (has_card_info()) {
      if (card_info_ != NULL) card_info_->::UNO::CardInfo::Clear();
    }
    if (has_status_info()) {
      if (status_info_ != NULL) status_info_->::UNO::StatusInfo::Clear();
    }
    if (has_doubt_info()) {
      if (doubt_info_ != NULL) doubt_info_->::UNO::DoubtInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.GameMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UNO.GameMsg.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UNO::GameMsg_Type_IsValid(value)) {
            set_type(static_cast< ::UNO::GameMsg_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color_info;
        break;
      }

      // optional .UNO.GameMsg.ColorInfo color_info = 2;
      case 2: {
        if (tag == 16) {
         parse_color_info:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UNO::GameMsg_ColorInfo_IsValid(value)) {
            set_color_info(static_cast< ::UNO::GameMsg_ColorInfo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_card_info;
        break;
      }

      // optional .UNO.CardInfo card_info = 3;
      case 3: {
        if (tag == 26) {
         parse_card_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status_info;
        break;
      }

      // optional .UNO.StatusInfo status_info = 4;
      case 4: {
        if (tag == 34) {
         parse_status_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_doubt_info;
        break;
      }

      // optional .UNO.DoubtInfo doubt_info = 5;
      case 5: {
        if (tag == 42) {
         parse_doubt_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doubt_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.GameMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.GameMsg)
  return false;
#undef DO_
}

void GameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.GameMsg)
  // required .UNO.GameMsg.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .UNO.GameMsg.ColorInfo color_info = 2;
  if (has_color_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color_info(), output);
  }

  // optional .UNO.CardInfo card_info = 3;
  if (has_card_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card_info(), output);
  }

  // optional .UNO.StatusInfo status_info = 4;
  if (has_status_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->status_info(), output);
  }

  // optional .UNO.DoubtInfo doubt_info = 5;
  if (has_doubt_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->doubt_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.GameMsg)
}

::google::protobuf::uint8* GameMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.GameMsg)
  // required .UNO.GameMsg.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .UNO.GameMsg.ColorInfo color_info = 2;
  if (has_color_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color_info(), target);
  }

  // optional .UNO.CardInfo card_info = 3;
  if (has_card_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card_info(), target);
  }

  // optional .UNO.StatusInfo status_info = 4;
  if (has_status_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->status_info(), target);
  }

  // optional .UNO.DoubtInfo doubt_info = 5;
  if (has_doubt_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->doubt_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.GameMsg)
  return target;
}

int GameMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UNO.GameMsg.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .UNO.GameMsg.ColorInfo color_info = 2;
    if (has_color_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color_info());
    }

    // optional .UNO.CardInfo card_info = 3;
    if (has_card_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_info());
    }

    // optional .UNO.StatusInfo status_info = 4;
    if (has_status_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_info());
    }

    // optional .UNO.DoubtInfo doubt_info = 5;
    if (has_doubt_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doubt_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMsg::MergeFrom(const GameMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_color_info()) {
      set_color_info(from.color_info());
    }
    if (from.has_card_info()) {
      mutable_card_info()->::UNO::CardInfo::MergeFrom(from.card_info());
    }
    if (from.has_status_info()) {
      mutable_status_info()->::UNO::StatusInfo::MergeFrom(from.status_info());
    }
    if (from.has_doubt_info()) {
      mutable_doubt_info()->::UNO::DoubtInfo::MergeFrom(from.doubt_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMsg::CopyFrom(const GameMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_card_info()) {
    if (!this->card_info().IsInitialized()) return false;
  }
  if (has_status_info()) {
    if (!this->status_info().IsInitialized()) return false;
  }
  if (has_doubt_info()) {
    if (!this->doubt_info().IsInitialized()) return false;
  }
  return true;
}

void GameMsg::Swap(GameMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(color_info_, other->color_info_);
    std::swap(card_info_, other->card_info_);
    std::swap(status_info_, other->status_info_);
    std::swap(doubt_info_, other->doubt_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMsg_descriptor_;
  metadata.reflection = GameMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMsg::kTimeFieldNumber;
const int ChatMsg::kUserIDFieldNumber;
const int ChatMsg::kContentFieldNumber;
#endif  // !_MSC_VER

ChatMsg::ChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.ChatMsg)
}

void ChatMsg::InitAsDefaultInstance() {
}

ChatMsg::ChatMsg(const ChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.ChatMsg)
}

void ChatMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  userid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsg::~ChatMsg() {
  // @@protoc_insertion_point(destructor:UNO.ChatMsg)
  SharedDtor();
}

void ChatMsg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsg_descriptor_;
}

const ChatMsg& ChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

ChatMsg* ChatMsg::default_instance_ = NULL;

ChatMsg* ChatMsg::New() const {
  return new ChatMsg;
}

void ChatMsg::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    time_ = GOOGLE_LONGLONG(0);
    userid_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.ChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userID;
        break;
      }

      // required int32 userID = 2;
      case 2: {
        if (tag == 16) {
         parse_userID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.ChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.ChatMsg)
  return false;
#undef DO_
}

void ChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.ChatMsg)
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.ChatMsg)
}

::google::protobuf::uint8* ChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.ChatMsg)
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required int32 userID = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.ChatMsg)
  return target;
}

int ChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required int32 userID = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMsg::MergeFrom(const ChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsg::CopyFrom(const ChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ChatMsg::Swap(ChatMsg* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(userid_, other->userid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsg_descriptor_;
  metadata.reflection = ChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreInfo::kUserIDFieldNumber;
const int ScoreInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

ScoreInfo::ScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.ScoreInfo)
}

void ScoreInfo::InitAsDefaultInstance() {
}

ScoreInfo::ScoreInfo(const ScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.ScoreInfo)
}

void ScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreInfo::~ScoreInfo() {
  // @@protoc_insertion_point(destructor:UNO.ScoreInfo)
  SharedDtor();
}

void ScoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreInfo_descriptor_;
}

const ScoreInfo& ScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

ScoreInfo* ScoreInfo::default_instance_ = NULL;

ScoreInfo* ScoreInfo::New() const {
  return new ScoreInfo;
}

void ScoreInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScoreInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.ScoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.ScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.ScoreInfo)
  return false;
#undef DO_
}

void ScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.ScoreInfo)
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.ScoreInfo)
}

::google::protobuf::uint8* ScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.ScoreInfo)
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.ScoreInfo)
  return target;
}

int ScoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreInfo::MergeFrom(const ScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreInfo::CopyFrom(const ScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ScoreInfo::Swap(ScoreInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreInfo_descriptor_;
  metadata.reflection = ScoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreMsg::kScoreInfoFieldNumber;
#endif  // !_MSC_VER

ScoreMsg::ScoreMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.ScoreMsg)
}

void ScoreMsg::InitAsDefaultInstance() {
}

ScoreMsg::ScoreMsg(const ScoreMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.ScoreMsg)
}

void ScoreMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreMsg::~ScoreMsg() {
  // @@protoc_insertion_point(destructor:UNO.ScoreMsg)
  SharedDtor();
}

void ScoreMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreMsg_descriptor_;
}

const ScoreMsg& ScoreMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

ScoreMsg* ScoreMsg::default_instance_ = NULL;

ScoreMsg* ScoreMsg::New() const {
  return new ScoreMsg;
}

void ScoreMsg::Clear() {
  score_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.ScoreMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UNO.ScoreInfo score_info = 1;
      case 1: {
        if (tag == 10) {
         parse_score_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_score_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.ScoreMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.ScoreMsg)
  return false;
#undef DO_
}

void ScoreMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.ScoreMsg)
  // repeated .UNO.ScoreInfo score_info = 1;
  for (int i = 0; i < this->score_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.ScoreMsg)
}

::google::protobuf::uint8* ScoreMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.ScoreMsg)
  // repeated .UNO.ScoreInfo score_info = 1;
  for (int i = 0; i < this->score_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->score_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.ScoreMsg)
  return target;
}

int ScoreMsg::ByteSize() const {
  int total_size = 0;

  // repeated .UNO.ScoreInfo score_info = 1;
  total_size += 1 * this->score_info_size();
  for (int i = 0; i < this->score_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreMsg::MergeFrom(const ScoreMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_info_.MergeFrom(from.score_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreMsg::CopyFrom(const ScoreMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreMsg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->score_info())) return false;
  return true;
}

void ScoreMsg::Swap(ScoreMsg* other) {
  if (other != this) {
    score_info_.Swap(&other->score_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreMsg_descriptor_;
  metadata.reflection = ScoreMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UNOMsg_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UNOMsg_Type_descriptor_;
}
bool UNOMsg_Type_IsValid(int value) {
  switch(value) {
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UNOMsg_Type UNOMsg::Room;
const UNOMsg_Type UNOMsg::Game;
const UNOMsg_Type UNOMsg::Chat;
const UNOMsg_Type UNOMsg::Error;
const UNOMsg_Type UNOMsg::Score;
const UNOMsg_Type UNOMsg::Type_MIN;
const UNOMsg_Type UNOMsg::Type_MAX;
const int UNOMsg::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UNOMsg::kTypeFieldNumber;
const int UNOMsg::kSequenceFieldNumber;
const int UNOMsg::kRoomMsgFieldNumber;
const int UNOMsg::kGameMsgFieldNumber;
const int UNOMsg::kChatMsgFieldNumber;
const int UNOMsg::kErrorMsgFieldNumber;
const int UNOMsg::kScoreMsgFieldNumber;
#endif  // !_MSC_VER

UNOMsg::UNOMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UNO.UNOMsg)
}

void UNOMsg::InitAsDefaultInstance() {
  room_msg_ = const_cast< ::UNO::RoomMsg*>(&::UNO::RoomMsg::default_instance());
  game_msg_ = const_cast< ::UNO::GameMsg*>(&::UNO::GameMsg::default_instance());
  chat_msg_ = const_cast< ::UNO::ChatMsg*>(&::UNO::ChatMsg::default_instance());
  score_msg_ = const_cast< ::UNO::ScoreMsg*>(&::UNO::ScoreMsg::default_instance());
}

UNOMsg::UNOMsg(const UNOMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UNO.UNOMsg)
}

void UNOMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 91;
  sequence_ = GOOGLE_LONGLONG(0);
  room_msg_ = NULL;
  game_msg_ = NULL;
  chat_msg_ = NULL;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UNOMsg::~UNOMsg() {
  // @@protoc_insertion_point(destructor:UNO.UNOMsg)
  SharedDtor();
}

void UNOMsg::SharedDtor() {
  if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_msg_;
  }
  if (this != default_instance_) {
    delete room_msg_;
    delete game_msg_;
    delete chat_msg_;
    delete score_msg_;
  }
}

void UNOMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UNOMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UNOMsg_descriptor_;
}

const UNOMsg& UNOMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_treadstone_2eproto();
  return *default_instance_;
}

UNOMsg* UNOMsg::default_instance_ = NULL;

UNOMsg* UNOMsg::New() const {
  return new UNOMsg;
}

void UNOMsg::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    type_ = 91;
    sequence_ = GOOGLE_LONGLONG(0);
    if (has_room_msg()) {
      if (room_msg_ != NULL) room_msg_->::UNO::RoomMsg::Clear();
    }
    if (has_game_msg()) {
      if (game_msg_ != NULL) game_msg_->::UNO::GameMsg::Clear();
    }
    if (has_chat_msg()) {
      if (chat_msg_ != NULL) chat_msg_->::UNO::ChatMsg::Clear();
    }
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_msg_->clear();
      }
    }
    if (has_score_msg()) {
      if (score_msg_ != NULL) score_msg_->::UNO::ScoreMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UNOMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UNO.UNOMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .UNO.UNOMsg.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UNO::UNOMsg_Type_IsValid(value)) {
            set_type(static_cast< ::UNO::UNOMsg_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // required int64 sequence = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_msg;
        break;
      }

      // optional .UNO.RoomMsg room_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_room_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_game_msg;
        break;
      }

      // optional .UNO.GameMsg game_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_game_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chat_msg;
        break;
      }

      // optional .UNO.ChatMsg chat_msg = 5;
      case 5: {
        if (tag == 42) {
         parse_chat_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_error_msg;
        break;
      }

      // optional string error_msg = 6;
      case 6: {
        if (tag == 50) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_score_msg;
        break;
      }

      // optional .UNO.ScoreMsg score_msg = 7;
      case 7: {
        if (tag == 58) {
         parse_score_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UNO.UNOMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UNO.UNOMsg)
  return false;
#undef DO_
}

void UNOMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UNO.UNOMsg)
  // required .UNO.UNOMsg.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int64 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequence(), output);
  }

  // optional .UNO.RoomMsg room_msg = 3;
  if (has_room_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->room_msg(), output);
  }

  // optional .UNO.GameMsg game_msg = 4;
  if (has_game_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->game_msg(), output);
  }

  // optional .UNO.ChatMsg chat_msg = 5;
  if (has_chat_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chat_msg(), output);
  }

  // optional string error_msg = 6;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->error_msg(), output);
  }

  // optional .UNO.ScoreMsg score_msg = 7;
  if (has_score_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->score_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UNO.UNOMsg)
}

::google::protobuf::uint8* UNOMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UNO.UNOMsg)
  // required .UNO.UNOMsg.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int64 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequence(), target);
  }

  // optional .UNO.RoomMsg room_msg = 3;
  if (has_room_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->room_msg(), target);
  }

  // optional .UNO.GameMsg game_msg = 4;
  if (has_game_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->game_msg(), target);
  }

  // optional .UNO.ChatMsg chat_msg = 5;
  if (has_chat_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->chat_msg(), target);
  }

  // optional string error_msg = 6;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->error_msg(), target);
  }

  // optional .UNO.ScoreMsg score_msg = 7;
  if (has_score_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->score_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UNO.UNOMsg)
  return target;
}

int UNOMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .UNO.UNOMsg.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int64 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequence());
    }

    // optional .UNO.RoomMsg room_msg = 3;
    if (has_room_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_msg());
    }

    // optional .UNO.GameMsg game_msg = 4;
    if (has_game_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_msg());
    }

    // optional .UNO.ChatMsg chat_msg = 5;
    if (has_chat_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat_msg());
    }

    // optional string error_msg = 6;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional .UNO.ScoreMsg score_msg = 7;
    if (has_score_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UNOMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UNOMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UNOMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UNOMsg::MergeFrom(const UNOMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_room_msg()) {
      mutable_room_msg()->::UNO::RoomMsg::MergeFrom(from.room_msg());
    }
    if (from.has_game_msg()) {
      mutable_game_msg()->::UNO::GameMsg::MergeFrom(from.game_msg());
    }
    if (from.has_chat_msg()) {
      mutable_chat_msg()->::UNO::ChatMsg::MergeFrom(from.chat_msg());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_score_msg()) {
      mutable_score_msg()->::UNO::ScoreMsg::MergeFrom(from.score_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UNOMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UNOMsg::CopyFrom(const UNOMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UNOMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_room_msg()) {
    if (!this->room_msg().IsInitialized()) return false;
  }
  if (has_game_msg()) {
    if (!this->game_msg().IsInitialized()) return false;
  }
  if (has_chat_msg()) {
    if (!this->chat_msg().IsInitialized()) return false;
  }
  if (has_score_msg()) {
    if (!this->score_msg().IsInitialized()) return false;
  }
  return true;
}

void UNOMsg::Swap(UNOMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sequence_, other->sequence_);
    std::swap(room_msg_, other->room_msg_);
    std::swap(game_msg_, other->game_msg_);
    std::swap(chat_msg_, other->chat_msg_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(score_msg_, other->score_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UNOMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UNOMsg_descriptor_;
  metadata.reflection = UNOMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace UNO

// @@protoc_insertion_point(global_scope)
